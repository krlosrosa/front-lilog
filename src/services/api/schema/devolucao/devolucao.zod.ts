/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Produtividade API
 * API de produtividade para gest√£o de produtividade dos funcion√°rios dentro do armaz√©m e gest√£o de carregamento
 * OpenAPI spec version: 1.0
 */
import {
  z as zod
} from 'zod';


/**
 * @summary Liberar demanda armazem
 */
export const liberarDemandaArmazemParams = zod.object({
  "demandaId": zod.string()
})

/**
 * @summary Lista as demandas por data
 */
export const listarDemandasPorDataParams = zod.object({
  "data": zod.string(),
  "centerId": zod.string()
})

/**
 * @summary Obt√©m informa√ß√µes da viagem Ravex
 */
export const getInfoByViagemIdRavexParams = zod.object({
  "viagemId": zod.string()
})

export const getInfoByViagemIdRavexResponsePlacaMin = 7;

export const getInfoByViagemIdRavexResponsePlacaMax = 7;
export const getInfoByViagemIdRavexResponseNotasItemItensItemDescricaoRegExp = new RegExp('^(?!produto n√£o encontrado$).*$');


export const getInfoByViagemIdRavexResponse = zod.object({
  "idViagem": zod.string(),
  "placa": zod.string().min(getInfoByViagemIdRavexResponsePlacaMin).max(getInfoByViagemIdRavexResponsePlacaMax),
  "motorista": zod.string(),
  "transportadora": zod.string(),
  "notas": zod.array(zod.object({
  "tipo": zod.enum(['DEVOLUCAO', 'DEVOLUCAO_PARCIAL', 'REENTREGA']),
  "notaFiscal": zod.string(),
  "notaFiscalParcial": zod.string().nullish(),
  "motivoDevolucao": zod.string(),
  "descMotivoDevolucao": zod.string().nullable(),
  "operador": zod.string().nullish(),
  "itens": zod.array(zod.object({
  "sku": zod.string(),
  "descricao": zod.string().regex(getInfoByViagemIdRavexResponseNotasItemItensItemDescricaoRegExp),
  "pesoLiquido": zod.number(),
  "quantidadeRavex": zod.number(),
  "quantidadeCaixas": zod.number(),
  "quantidadeUnidades": zod.number(),
  "fatorConversao": zod.number(),
  "unPorCaixa": zod.number(),
  "decimal": zod.number()
}))
}))
}).refine(
  // 2. A fun√ß√£o de valida√ß√£o agora recebe o objeto inteiro da nota ('data')
  (data) => {
    // 3. A l√≥gica de valida√ß√£o:
    // Se o tipo N√ÉO FOR 'DEVOLUCAO_PARCIAL', a valida√ß√£o passa para este campo.
    if (data.notas.some(nota => nota.tipo !== 'DEVOLUCAO_PARCIAL')) {
      return true; 
    }
    
    // Se o tipo FOR 'DEVOLUCAO_PARCIAL', o campo notaFiscalParcial
    // deve existir e n√£o pode ser uma string vazia.
    return !!data.notas.some(nota => nota.notaFiscalParcial && nota.notaFiscalParcial.trim() !== '');
  },
  // 4. O objeto de configura√ß√£o do erro:
  {
    // A mensagem a ser exibida se a valida√ß√£o falhar (retornar false)
    message: 'Nota Fiscal Parcial √© obrigat√≥ria para devolu√ß√µes parciais',
    path: ['notas', 'notaFiscalParcial'], 
  }
)

/**
 * @summary Adiciona uma nova demanda via Ravex
 */
export const adicionarNovaDemandaViaRavexParams = zod.object({
  "centerId": zod.string()
})

export const adicionarNovaDemandaViaRavexBodyPlacaMin = 7;

export const adicionarNovaDemandaViaRavexBodyPlacaMax = 7;
export const adicionarNovaDemandaViaRavexBodyNotasItemItensItemDescricaoRegExp = new RegExp('^(?!produto n√£o encontrado$).*$');


export const adicionarNovaDemandaViaRavexBody = zod.object({
  "idViagem": zod.string(),
  "placa": zod.string().min(adicionarNovaDemandaViaRavexBodyPlacaMin).max(adicionarNovaDemandaViaRavexBodyPlacaMax),
  "motorista": zod.string(),
  "transportadora": zod.string(),
  "notas": zod.array(zod.object({
  "tipo": zod.enum(['DEVOLUCAO', 'DEVOLUCAO_PARCIAL', 'REENTREGA']),
  "notaFiscal": zod.string(),
  "notaFiscalParcial": zod.string().nullish(),
  "motivoDevolucao": zod.string(),
  "descMotivoDevolucao": zod.string().nullable(),
  "operador": zod.string().nullish(),
  "itens": zod.array(zod.object({
  "sku": zod.string(),
  "descricao": zod.string().regex(adicionarNovaDemandaViaRavexBodyNotasItemItensItemDescricaoRegExp),
  "pesoLiquido": zod.number(),
  "quantidadeRavex": zod.number(),
  "quantidadeCaixas": zod.number(),
  "quantidadeUnidades": zod.number(),
  "fatorConversao": zod.number(),
  "unPorCaixa": zod.number(),
  "decimal": zod.number()
}))
}))
}).refine(
  // 2. A fun√ß√£o de valida√ß√£o agora recebe o objeto inteiro da nota ('data')
  (data) => {
    // 3. A l√≥gica de valida√ß√£o:
    // Se o tipo N√ÉO FOR 'DEVOLUCAO_PARCIAL', a valida√ß√£o passa para este campo.
    if (data.notas.some(nota => nota.tipo !== 'DEVOLUCAO_PARCIAL')) {
      return true; 
    }
    
    // Se o tipo FOR 'DEVOLUCAO_PARCIAL', o campo notaFiscalParcial
    // deve existir e n√£o pode ser uma string vazia.
    return !!data.notas.some(nota => nota.notaFiscalParcial && nota.notaFiscalParcial.trim() !== '');
  },
  // 4. O objeto de configura√ß√£o do erro:
  {
    // A mensagem a ser exibida se a valida√ß√£o falhar (retornar false)
    message: 'Nota Fiscal Parcial √© obrigat√≥ria para devolu√ß√µes parciais',
    path: ['notas', 'notaFiscalParcial'], 
  }
)

export const adicionarNovaDemandaViaRavexResponse = zod.number()

/**
 * @summary Adiciona itens em uma demanda via Ravex
 */
export const adicionarItensEmDemandaViaRavexParams = zod.object({
  "demandaId": zod.string(),
  "centerId": zod.string()
})

export const adicionarItensEmDemandaViaRavexBodyItensItemDescricaoRegExp = new RegExp('^(?!produto n√£o encontrado$).*$');


export const adicionarItensEmDemandaViaRavexBodyItem = zod.object({
  "idViagemRavex": zod.string(),
  "tipo": zod.enum(['DEVOLUCAO', 'DEVOLUCAO_PARCIAL', 'REENTREGA']),
  "notaFiscal": zod.string(),
  "notaFiscalParcial": zod.string().nullish(),
  "motivoDevolucao": zod.string(),
  "descMotivoDevolucao": zod.string().nullable(),
  "operador": zod.string().nullish(),
  "itens": zod.array(zod.object({
  "sku": zod.string(),
  "descricao": zod.string().regex(adicionarItensEmDemandaViaRavexBodyItensItemDescricaoRegExp),
  "pesoLiquido": zod.number(),
  "quantidadeRavex": zod.number(),
  "quantidadeCaixas": zod.number(),
  "quantidadeUnidades": zod.number(),
  "fatorConversao": zod.number(),
  "unPorCaixa": zod.number(),
  "decimal": zod.number()
}))
})
export const adicionarItensEmDemandaViaRavexBody = zod.array(adicionarItensEmDemandaViaRavexBodyItem)

/**
 * @summary Reabre uma demanda
 */
export const reabrirDemandaParams = zod.object({
  "demandaId": zod.string()
})

/**
 * @summary Deleta uma demanda
 */
export const deletarDemandaParams = zod.object({
  "demandaId": zod.string()
})

/**
 * @summary Finaliza uma demanda
 */
export const finalizarDemandaParams = zod.object({
  "demandaId": zod.string()
})

/**
 * @summary Obt√©m o resultado de uma demanda
 */
export const resultadoDemandaParams = zod.object({
  "demandaId": zod.string()
})

export const resultadoDemandaResponse = zod.object({
  "temperaturaBau": zod.number(),
  "temperaturaProduto": zod.number(),
  "placa": zod.string(),
  "motorista": zod.string(),
  "transportadora": zod.string(),
  "status": zod.enum(['AGUARDANDO_LIBERACAO', 'AGUARDANDO_CONFERENCIA', 'EM_CONFERENCIA', 'CONFERENCIA_FINALIZADA', 'FINALIZADO', 'CANCELADO']),
  "operador": zod.string(),
  "conferente": zod.string(),
  "notas": zod.array(zod.object({
  "tipo": zod.enum(['DEVOLUCAO', 'DEVOLUCAO_PARCIAL', 'REENTREGA']),
  "nf": zod.string(),
  "nfParcial": zod.string().optional()
})),
  "itens": zod.array(zod.object({
  "sku": zod.string(),
  "descricao": zod.string(),
  "totalContabilCaixa": zod.number(),
  "totalFisicoCaixa": zod.number(),
  "totalContabilUnidade": zod.number(),
  "totalFisicoUnidade": zod.number(),
  "diferencaCaixa": zod.number(),
  "diferencaUnidade": zod.number(),
  "totalAvariasCaixa": zod.number(),
  "totalAvariasUnidade": zod.number()
}))
})

/**
 * @summary Lista as notas de uma demanda
 */
export const listarNotasDemandaParams = zod.object({
  "demandaId": zod.string()
})

export const listarNotasDemandaResponse = zod.object({
  "placa": zod.string(),
  "motorista": zod.string(),
  "transportadora": zod.string(),
  "cargaSegregada": zod.boolean(),
  "retornoPalete": zod.boolean(),
  "quantidadePaletes": zod.number().nullable(),
  "centerId": zod.string(),
  "adicionadoPorId": zod.string(),
  "criadoEm": zod.string(),
  "status": zod.string(),
  "notas": zod.array(zod.object({
  "id": zod.number(),
  "viagemId": zod.string(),
  "empresa": zod.string(),
  "devolucaoDemandaId": zod.number(),
  "notaFiscal": zod.string(),
  "motivoDevolucao": zod.string(),
  "descMotivoDevolucao": zod.string().nullable(),
  "nfParcial": zod.string().nullable(),
  "criadoEm": zod.string(),
  "tipo": zod.string()
}))
})

/**
 * @summary Obt√©m informa√ß√µes da demanda
 */
export const getInfoDemandaParams = zod.object({
  "demandaId": zod.string()
})

export const getInfoDemandaResponse = zod.object({
  "id": zod.number(),
  "placa": zod.string(),
  "motorista": zod.string(),
  "transportadora": zod.string(),
  "cargaSegregada": zod.boolean(),
  "retornoPalete": zod.boolean(),
  "quantidadePaletes": zod.number(),
  "status": zod.string()
})

