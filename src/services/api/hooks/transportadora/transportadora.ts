/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Produtividade API
 * API de produtividade para gest√£o de produtividade dos funcion√°rios dentro do armaz√©m e gest√£o de carregamento
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ResponseTransportadoraDto
} from '../../model';

import { axiosFetcher } from '../../../http/axios.http';
import type { ErrorType } from '../../../http/axios.http';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Adiciona uma nova transportadora
 */
export const adicionarTransportadora = (
    centerId: string,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<null>(
      {url: `/transportadora/adicionar-transportadora/${centerId}`, method: 'POST', signal
    },
      options);
    }
  


export const getAdicionarTransportadoraMutationOptions = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof adicionarTransportadora>>, TError,{centerId: string}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof adicionarTransportadora>>, TError,{centerId: string}, TContext> => {

const mutationKey = ['adicionarTransportadora'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof adicionarTransportadora>>, {centerId: string}> = (props) => {
          const {centerId} = props ?? {};

          return  adicionarTransportadora(centerId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AdicionarTransportadoraMutationResult = NonNullable<Awaited<ReturnType<typeof adicionarTransportadora>>>
    
    export type AdicionarTransportadoraMutationError = ErrorType<null>

    /**
 * @summary Adiciona uma nova transportadora
 */
export const useAdicionarTransportadora = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof adicionarTransportadora>>, TError,{centerId: string}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof adicionarTransportadora>>,
        TError,
        {centerId: string},
        TContext
      > => {

      const mutationOptions = getAdicionarTransportadoraMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Busca todas as transportadoras por centro
 */
export const buscarTransportadorasPorCentro = (
    centerId: string,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<ResponseTransportadoraDto>(
      {url: `/transportadora/buscar-transportadoras-por-centro/${centerId}`, method: 'GET', signal
    },
      options);
    }
  

export const getBuscarTransportadorasPorCentroQueryKey = (centerId?: string,) => {
    return [`/transportadora/buscar-transportadoras-por-centro/${centerId}`] as const;
    }

    
export const getBuscarTransportadorasPorCentroQueryOptions = <TData = Awaited<ReturnType<typeof buscarTransportadorasPorCentro>>, TError = ErrorType<null>>(centerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof buscarTransportadorasPorCentro>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBuscarTransportadorasPorCentroQueryKey(centerId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof buscarTransportadorasPorCentro>>> = ({ signal }) => buscarTransportadorasPorCentro(centerId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(centerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof buscarTransportadorasPorCentro>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type BuscarTransportadorasPorCentroQueryResult = NonNullable<Awaited<ReturnType<typeof buscarTransportadorasPorCentro>>>
export type BuscarTransportadorasPorCentroQueryError = ErrorType<null>


export function useBuscarTransportadorasPorCentro<TData = Awaited<ReturnType<typeof buscarTransportadorasPorCentro>>, TError = ErrorType<null>>(
 centerId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof buscarTransportadorasPorCentro>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof buscarTransportadorasPorCentro>>,
          TError,
          Awaited<ReturnType<typeof buscarTransportadorasPorCentro>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useBuscarTransportadorasPorCentro<TData = Awaited<ReturnType<typeof buscarTransportadorasPorCentro>>, TError = ErrorType<null>>(
 centerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof buscarTransportadorasPorCentro>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof buscarTransportadorasPorCentro>>,
          TError,
          Awaited<ReturnType<typeof buscarTransportadorasPorCentro>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useBuscarTransportadorasPorCentro<TData = Awaited<ReturnType<typeof buscarTransportadorasPorCentro>>, TError = ErrorType<null>>(
 centerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof buscarTransportadorasPorCentro>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Busca todas as transportadoras por centro
 */

export function useBuscarTransportadorasPorCentro<TData = Awaited<ReturnType<typeof buscarTransportadorasPorCentro>>, TError = ErrorType<null>>(
 centerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof buscarTransportadorasPorCentro>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getBuscarTransportadorasPorCentroQueryOptions(centerId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Edita uma transportadora
 */
export const editarTransportadora = (
    id: string,
 options?: SecondParameter<typeof axiosFetcher>,) => {
      
      
      return axiosFetcher<null>(
      {url: `/transportadora/${id}`, method: 'PUT'
    },
      options);
    }
  


export const getEditarTransportadoraMutationOptions = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof editarTransportadora>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof editarTransportadora>>, TError,{id: string}, TContext> => {

const mutationKey = ['editarTransportadora'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof editarTransportadora>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  editarTransportadora(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EditarTransportadoraMutationResult = NonNullable<Awaited<ReturnType<typeof editarTransportadora>>>
    
    export type EditarTransportadoraMutationError = ErrorType<null>

    /**
 * @summary Edita uma transportadora
 */
export const useEditarTransportadora = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof editarTransportadora>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof editarTransportadora>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getEditarTransportadoraMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Deleta uma transportadora
 */
export const deletarTransportadora = (
    id: string,
 options?: SecondParameter<typeof axiosFetcher>,) => {
      
      
      return axiosFetcher<null>(
      {url: `/transportadora/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeletarTransportadoraMutationOptions = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletarTransportadora>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof deletarTransportadora>>, TError,{id: string}, TContext> => {

const mutationKey = ['deletarTransportadora'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletarTransportadora>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deletarTransportadora(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeletarTransportadoraMutationResult = NonNullable<Awaited<ReturnType<typeof deletarTransportadora>>>
    
    export type DeletarTransportadoraMutationError = ErrorType<null>

    /**
 * @summary Deleta uma transportadora
 */
export const useDeletarTransportadora = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletarTransportadora>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deletarTransportadora>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeletarTransportadoraMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    