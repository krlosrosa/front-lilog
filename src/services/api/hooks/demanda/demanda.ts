/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Produtividade API
 * API de produtividade para gest√£o de produtividade dos funcion√°rios dentro do armaz√©m e gest√£o de carregamento
 * OpenAPI spec version: 1.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  DemandaDtoRequest
} from '../../model';

import { axiosFetcher } from '../../../http/axios.http';
import type { ErrorType , BodyType } from '../../../http/axios.http';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Adiciona uma nova demanda devolucao
 */
export const demandaControllerAdicionarDemanda = (
    demandaDtoRequest: BodyType<DemandaDtoRequest>,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<null>(
      {url: `/api/demanda/adicionar-demanda`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: demandaDtoRequest, signal
    },
      options);
    }
  


export const getDemandaControllerAdicionarDemandaMutationOptions = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof demandaControllerAdicionarDemanda>>, TError,{data: BodyType<DemandaDtoRequest>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof demandaControllerAdicionarDemanda>>, TError,{data: BodyType<DemandaDtoRequest>}, TContext> => {

const mutationKey = ['demandaControllerAdicionarDemanda'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof demandaControllerAdicionarDemanda>>, {data: BodyType<DemandaDtoRequest>}> = (props) => {
          const {data} = props ?? {};

          return  demandaControllerAdicionarDemanda(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DemandaControllerAdicionarDemandaMutationResult = NonNullable<Awaited<ReturnType<typeof demandaControllerAdicionarDemanda>>>
    export type DemandaControllerAdicionarDemandaMutationBody = BodyType<DemandaDtoRequest>
    export type DemandaControllerAdicionarDemandaMutationError = ErrorType<null>

    /**
 * @summary Adiciona uma nova demanda devolucao
 */
export const useDemandaControllerAdicionarDemanda = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof demandaControllerAdicionarDemanda>>, TError,{data: BodyType<DemandaDtoRequest>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof demandaControllerAdicionarDemanda>>,
        TError,
        {data: BodyType<DemandaDtoRequest>},
        TContext
      > => {

      const mutationOptions = getDemandaControllerAdicionarDemandaMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    