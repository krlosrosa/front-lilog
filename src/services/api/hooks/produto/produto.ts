/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Produtividade API
 * API de produtividade para gest√£o de produtividade dos funcion√°rios dentro do armaz√©m e gest√£o de carregamento
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateProdutoZodDto
} from '../../model';

import { axiosFetcher } from '../../../http/axios.http';
import type { ErrorType , BodyType } from '../../../http/axios.http';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Cria um novo produto
 */
export const criarNovoProduto = (
    createProdutoZodDto: BodyType<CreateProdutoZodDto>,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<null>(
      {url: `/api/produto`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createProdutoZodDto, signal
    },
      options);
    }
  


export const getCriarNovoProdutoMutationOptions = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof criarNovoProduto>>, TError,{data: BodyType<CreateProdutoZodDto>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof criarNovoProduto>>, TError,{data: BodyType<CreateProdutoZodDto>}, TContext> => {

const mutationKey = ['criarNovoProduto'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof criarNovoProduto>>, {data: BodyType<CreateProdutoZodDto>}> = (props) => {
          const {data} = props ?? {};

          return  criarNovoProduto(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CriarNovoProdutoMutationResult = NonNullable<Awaited<ReturnType<typeof criarNovoProduto>>>
    export type CriarNovoProdutoMutationBody = BodyType<CreateProdutoZodDto>
    export type CriarNovoProdutoMutationError = ErrorType<null>

    /**
 * @summary Cria um novo produto
 */
export const useCriarNovoProduto = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof criarNovoProduto>>, TError,{data: BodyType<CreateProdutoZodDto>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof criarNovoProduto>>,
        TError,
        {data: BodyType<CreateProdutoZodDto>},
        TContext
      > => {

      const mutationOptions = getCriarNovoProdutoMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Busca todos os produtos
 */
export const buscarTodosProdutos = (
    
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<null>(
      {url: `/api/produto`, method: 'GET', signal
    },
      options);
    }
  

export const getBuscarTodosProdutosQueryKey = () => {
    return [`/api/produto`] as const;
    }

    
export const getBuscarTodosProdutosQueryOptions = <TData = Awaited<ReturnType<typeof buscarTodosProdutos>>, TError = ErrorType<null>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof buscarTodosProdutos>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBuscarTodosProdutosQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof buscarTodosProdutos>>> = ({ signal }) => buscarTodosProdutos(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof buscarTodosProdutos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type BuscarTodosProdutosQueryResult = NonNullable<Awaited<ReturnType<typeof buscarTodosProdutos>>>
export type BuscarTodosProdutosQueryError = ErrorType<null>


export function useBuscarTodosProdutos<TData = Awaited<ReturnType<typeof buscarTodosProdutos>>, TError = ErrorType<null>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof buscarTodosProdutos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof buscarTodosProdutos>>,
          TError,
          Awaited<ReturnType<typeof buscarTodosProdutos>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useBuscarTodosProdutos<TData = Awaited<ReturnType<typeof buscarTodosProdutos>>, TError = ErrorType<null>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof buscarTodosProdutos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof buscarTodosProdutos>>,
          TError,
          Awaited<ReturnType<typeof buscarTodosProdutos>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useBuscarTodosProdutos<TData = Awaited<ReturnType<typeof buscarTodosProdutos>>, TError = ErrorType<null>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof buscarTodosProdutos>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Busca todos os produtos
 */

export function useBuscarTodosProdutos<TData = Awaited<ReturnType<typeof buscarTodosProdutos>>, TError = ErrorType<null>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof buscarTodosProdutos>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getBuscarTodosProdutosQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Busca um produto
 */
export const buscarProduto = (
    id: string,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<null>(
      {url: `/api/produto/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getBuscarProdutoQueryKey = (id?: string,) => {
    return [`/api/produto/${id}`] as const;
    }

    
export const getBuscarProdutoQueryOptions = <TData = Awaited<ReturnType<typeof buscarProduto>>, TError = ErrorType<null>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof buscarProduto>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBuscarProdutoQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof buscarProduto>>> = ({ signal }) => buscarProduto(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof buscarProduto>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type BuscarProdutoQueryResult = NonNullable<Awaited<ReturnType<typeof buscarProduto>>>
export type BuscarProdutoQueryError = ErrorType<null>


export function useBuscarProduto<TData = Awaited<ReturnType<typeof buscarProduto>>, TError = ErrorType<null>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof buscarProduto>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof buscarProduto>>,
          TError,
          Awaited<ReturnType<typeof buscarProduto>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useBuscarProduto<TData = Awaited<ReturnType<typeof buscarProduto>>, TError = ErrorType<null>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof buscarProduto>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof buscarProduto>>,
          TError,
          Awaited<ReturnType<typeof buscarProduto>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useBuscarProduto<TData = Awaited<ReturnType<typeof buscarProduto>>, TError = ErrorType<null>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof buscarProduto>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Busca um produto
 */

export function useBuscarProduto<TData = Awaited<ReturnType<typeof buscarProduto>>, TError = ErrorType<null>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof buscarProduto>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getBuscarProdutoQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Atualiza um produto
 */
export const atualizarProduto = (
    id: string,
    createProdutoZodDto: BodyType<CreateProdutoZodDto>,
 options?: SecondParameter<typeof axiosFetcher>,) => {
      
      
      return axiosFetcher<null>(
      {url: `/api/produto/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: createProdutoZodDto
    },
      options);
    }
  


export const getAtualizarProdutoMutationOptions = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof atualizarProduto>>, TError,{id: string;data: BodyType<CreateProdutoZodDto>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof atualizarProduto>>, TError,{id: string;data: BodyType<CreateProdutoZodDto>}, TContext> => {

const mutationKey = ['atualizarProduto'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof atualizarProduto>>, {id: string;data: BodyType<CreateProdutoZodDto>}> = (props) => {
          const {id,data} = props ?? {};

          return  atualizarProduto(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AtualizarProdutoMutationResult = NonNullable<Awaited<ReturnType<typeof atualizarProduto>>>
    export type AtualizarProdutoMutationBody = BodyType<CreateProdutoZodDto>
    export type AtualizarProdutoMutationError = ErrorType<null>

    /**
 * @summary Atualiza um produto
 */
export const useAtualizarProduto = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof atualizarProduto>>, TError,{id: string;data: BodyType<CreateProdutoZodDto>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof atualizarProduto>>,
        TError,
        {id: string;data: BodyType<CreateProdutoZodDto>},
        TContext
      > => {

      const mutationOptions = getAtualizarProdutoMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Deleta um produto
 */
export const deletarProduto = (
    id: string,
 options?: SecondParameter<typeof axiosFetcher>,) => {
      
      
      return axiosFetcher<null>(
      {url: `/api/produto/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeletarProdutoMutationOptions = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletarProduto>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof deletarProduto>>, TError,{id: string}, TContext> => {

const mutationKey = ['deletarProduto'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletarProduto>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deletarProduto(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeletarProdutoMutationResult = NonNullable<Awaited<ReturnType<typeof deletarProduto>>>
    
    export type DeletarProdutoMutationError = ErrorType<null>

    /**
 * @summary Deleta um produto
 */
export const useDeletarProduto = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletarProduto>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deletarProduto>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeletarProdutoMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    