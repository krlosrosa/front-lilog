/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Produtividade API
 * API de produtividade para gest√£o de produtividade dos funcion√°rios dentro do armaz√©m e gest√£o de carregamento
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AddItensEmDemandaDto,
  GetInfoDemandaResponseZodDto,
  ListarNotasDemandaResponseZodDto,
  ResumoDevolucaoDto,
  ReturnInfoGeralRavex
} from '../../model';

import { axiosFetcher } from '../../../http/axios.http';
import type { ErrorType , BodyType } from '../../../http/axios.http';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Liberar demanda armazem
 */
export const liberarDemandaArmazem = (
    demandaId: string,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<null>(
      {url: `/api/demanda/liberar-demanda-armazem/${demandaId}`, method: 'POST', signal
    },
      options);
    }
  


export const getLiberarDemandaArmazemMutationOptions = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof liberarDemandaArmazem>>, TError,{demandaId: string}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof liberarDemandaArmazem>>, TError,{demandaId: string}, TContext> => {

const mutationKey = ['liberarDemandaArmazem'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof liberarDemandaArmazem>>, {demandaId: string}> = (props) => {
          const {demandaId} = props ?? {};

          return  liberarDemandaArmazem(demandaId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LiberarDemandaArmazemMutationResult = NonNullable<Awaited<ReturnType<typeof liberarDemandaArmazem>>>
    
    export type LiberarDemandaArmazemMutationError = ErrorType<null>

    /**
 * @summary Liberar demanda armazem
 */
export const useLiberarDemandaArmazem = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof liberarDemandaArmazem>>, TError,{demandaId: string}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof liberarDemandaArmazem>>,
        TError,
        {demandaId: string},
        TContext
      > => {

      const mutationOptions = getLiberarDemandaArmazemMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Lista as demandas por data
 */
export const listarDemandasPorData = (
    data: string,
    centerId: string,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<null>(
      {url: `/api/demanda/listar-demandas-por-data/${data}/${centerId}`, method: 'GET', signal
    },
      options);
    }
  

export const getListarDemandasPorDataQueryKey = (data?: string,
    centerId?: string,) => {
    return [`/api/demanda/listar-demandas-por-data/${data}/${centerId}`] as const;
    }

    
export const getListarDemandasPorDataQueryOptions = <TData = Awaited<ReturnType<typeof listarDemandasPorData>>, TError = ErrorType<null>>(data: string,
    centerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarDemandasPorData>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListarDemandasPorDataQueryKey(data,centerId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listarDemandasPorData>>> = ({ signal }) => listarDemandasPorData(data,centerId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(data && centerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listarDemandasPorData>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListarDemandasPorDataQueryResult = NonNullable<Awaited<ReturnType<typeof listarDemandasPorData>>>
export type ListarDemandasPorDataQueryError = ErrorType<null>


export function useListarDemandasPorData<TData = Awaited<ReturnType<typeof listarDemandasPorData>>, TError = ErrorType<null>>(
 data: string,
    centerId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarDemandasPorData>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listarDemandasPorData>>,
          TError,
          Awaited<ReturnType<typeof listarDemandasPorData>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListarDemandasPorData<TData = Awaited<ReturnType<typeof listarDemandasPorData>>, TError = ErrorType<null>>(
 data: string,
    centerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarDemandasPorData>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listarDemandasPorData>>,
          TError,
          Awaited<ReturnType<typeof listarDemandasPorData>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListarDemandasPorData<TData = Awaited<ReturnType<typeof listarDemandasPorData>>, TError = ErrorType<null>>(
 data: string,
    centerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarDemandasPorData>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Lista as demandas por data
 */

export function useListarDemandasPorData<TData = Awaited<ReturnType<typeof listarDemandasPorData>>, TError = ErrorType<null>>(
 data: string,
    centerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarDemandasPorData>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListarDemandasPorDataQueryOptions(data,centerId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Obt√©m informa√ß√µes da viagem Ravex
 */
export const getInfoByViagemIdRavex = (
    viagemId: string,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<ReturnInfoGeralRavex>(
      {url: `/api/demanda/get-info-by-viagem-id-ravex/${viagemId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetInfoByViagemIdRavexQueryKey = (viagemId?: string,) => {
    return [`/api/demanda/get-info-by-viagem-id-ravex/${viagemId}`] as const;
    }

    
export const getGetInfoByViagemIdRavexQueryOptions = <TData = Awaited<ReturnType<typeof getInfoByViagemIdRavex>>, TError = ErrorType<null>>(viagemId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInfoByViagemIdRavex>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetInfoByViagemIdRavexQueryKey(viagemId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getInfoByViagemIdRavex>>> = ({ signal }) => getInfoByViagemIdRavex(viagemId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(viagemId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getInfoByViagemIdRavex>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetInfoByViagemIdRavexQueryResult = NonNullable<Awaited<ReturnType<typeof getInfoByViagemIdRavex>>>
export type GetInfoByViagemIdRavexQueryError = ErrorType<null>


export function useGetInfoByViagemIdRavex<TData = Awaited<ReturnType<typeof getInfoByViagemIdRavex>>, TError = ErrorType<null>>(
 viagemId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInfoByViagemIdRavex>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInfoByViagemIdRavex>>,
          TError,
          Awaited<ReturnType<typeof getInfoByViagemIdRavex>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInfoByViagemIdRavex<TData = Awaited<ReturnType<typeof getInfoByViagemIdRavex>>, TError = ErrorType<null>>(
 viagemId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInfoByViagemIdRavex>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInfoByViagemIdRavex>>,
          TError,
          Awaited<ReturnType<typeof getInfoByViagemIdRavex>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInfoByViagemIdRavex<TData = Awaited<ReturnType<typeof getInfoByViagemIdRavex>>, TError = ErrorType<null>>(
 viagemId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInfoByViagemIdRavex>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Obt√©m informa√ß√µes da viagem Ravex
 */

export function useGetInfoByViagemIdRavex<TData = Awaited<ReturnType<typeof getInfoByViagemIdRavex>>, TError = ErrorType<null>>(
 viagemId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInfoByViagemIdRavex>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetInfoByViagemIdRavexQueryOptions(viagemId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Adiciona uma nova demanda via Ravex
 */
export const adicionarNovaDemandaViaRavex = (
    centerId: string,
    returnInfoGeralRavex: BodyType<ReturnInfoGeralRavex>,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<number>(
      {url: `/api/demanda/adicionar-nova-demanda-via-ravex/${centerId}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: returnInfoGeralRavex, signal
    },
      options);
    }
  


export const getAdicionarNovaDemandaViaRavexMutationOptions = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof adicionarNovaDemandaViaRavex>>, TError,{centerId: string;data: BodyType<ReturnInfoGeralRavex>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof adicionarNovaDemandaViaRavex>>, TError,{centerId: string;data: BodyType<ReturnInfoGeralRavex>}, TContext> => {

const mutationKey = ['adicionarNovaDemandaViaRavex'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof adicionarNovaDemandaViaRavex>>, {centerId: string;data: BodyType<ReturnInfoGeralRavex>}> = (props) => {
          const {centerId,data} = props ?? {};

          return  adicionarNovaDemandaViaRavex(centerId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AdicionarNovaDemandaViaRavexMutationResult = NonNullable<Awaited<ReturnType<typeof adicionarNovaDemandaViaRavex>>>
    export type AdicionarNovaDemandaViaRavexMutationBody = BodyType<ReturnInfoGeralRavex>
    export type AdicionarNovaDemandaViaRavexMutationError = ErrorType<null>

    /**
 * @summary Adiciona uma nova demanda via Ravex
 */
export const useAdicionarNovaDemandaViaRavex = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof adicionarNovaDemandaViaRavex>>, TError,{centerId: string;data: BodyType<ReturnInfoGeralRavex>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof adicionarNovaDemandaViaRavex>>,
        TError,
        {centerId: string;data: BodyType<ReturnInfoGeralRavex>},
        TContext
      > => {

      const mutationOptions = getAdicionarNovaDemandaViaRavexMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Adiciona itens em uma demanda via Ravex
 */
export const adicionarItensEmDemandaViaRavex = (
    demandaId: string,
    centerId: string,
    addItensEmDemandaDto: BodyType<AddItensEmDemandaDto>,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<null>(
      {url: `/api/demanda/adicionar-itens-em-demanda-via-ravex/${demandaId}/${centerId}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: addItensEmDemandaDto, signal
    },
      options);
    }
  


export const getAdicionarItensEmDemandaViaRavexMutationOptions = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof adicionarItensEmDemandaViaRavex>>, TError,{demandaId: string;centerId: string;data: BodyType<AddItensEmDemandaDto>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof adicionarItensEmDemandaViaRavex>>, TError,{demandaId: string;centerId: string;data: BodyType<AddItensEmDemandaDto>}, TContext> => {

const mutationKey = ['adicionarItensEmDemandaViaRavex'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof adicionarItensEmDemandaViaRavex>>, {demandaId: string;centerId: string;data: BodyType<AddItensEmDemandaDto>}> = (props) => {
          const {demandaId,centerId,data} = props ?? {};

          return  adicionarItensEmDemandaViaRavex(demandaId,centerId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AdicionarItensEmDemandaViaRavexMutationResult = NonNullable<Awaited<ReturnType<typeof adicionarItensEmDemandaViaRavex>>>
    export type AdicionarItensEmDemandaViaRavexMutationBody = BodyType<AddItensEmDemandaDto>
    export type AdicionarItensEmDemandaViaRavexMutationError = ErrorType<null>

    /**
 * @summary Adiciona itens em uma demanda via Ravex
 */
export const useAdicionarItensEmDemandaViaRavex = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof adicionarItensEmDemandaViaRavex>>, TError,{demandaId: string;centerId: string;data: BodyType<AddItensEmDemandaDto>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof adicionarItensEmDemandaViaRavex>>,
        TError,
        {demandaId: string;centerId: string;data: BodyType<AddItensEmDemandaDto>},
        TContext
      > => {

      const mutationOptions = getAdicionarItensEmDemandaViaRavexMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Reabre uma demanda
 */
export const reabrirDemanda = (
    demandaId: string,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<null>(
      {url: `/api/demanda/reabrir-demanda/${demandaId}`, method: 'POST', signal
    },
      options);
    }
  


export const getReabrirDemandaMutationOptions = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof reabrirDemanda>>, TError,{demandaId: string}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof reabrirDemanda>>, TError,{demandaId: string}, TContext> => {

const mutationKey = ['reabrirDemanda'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof reabrirDemanda>>, {demandaId: string}> = (props) => {
          const {demandaId} = props ?? {};

          return  reabrirDemanda(demandaId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ReabrirDemandaMutationResult = NonNullable<Awaited<ReturnType<typeof reabrirDemanda>>>
    
    export type ReabrirDemandaMutationError = ErrorType<null>

    /**
 * @summary Reabre uma demanda
 */
export const useReabrirDemanda = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof reabrirDemanda>>, TError,{demandaId: string}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof reabrirDemanda>>,
        TError,
        {demandaId: string},
        TContext
      > => {

      const mutationOptions = getReabrirDemandaMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Deleta uma demanda
 */
export const deletarDemanda = (
    demandaId: string,
 options?: SecondParameter<typeof axiosFetcher>,) => {
      
      
      return axiosFetcher<null>(
      {url: `/api/demanda/deletar-demanda/${demandaId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeletarDemandaMutationOptions = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletarDemanda>>, TError,{demandaId: string}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof deletarDemanda>>, TError,{demandaId: string}, TContext> => {

const mutationKey = ['deletarDemanda'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletarDemanda>>, {demandaId: string}> = (props) => {
          const {demandaId} = props ?? {};

          return  deletarDemanda(demandaId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeletarDemandaMutationResult = NonNullable<Awaited<ReturnType<typeof deletarDemanda>>>
    
    export type DeletarDemandaMutationError = ErrorType<null>

    /**
 * @summary Deleta uma demanda
 */
export const useDeletarDemanda = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletarDemanda>>, TError,{demandaId: string}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deletarDemanda>>,
        TError,
        {demandaId: string},
        TContext
      > => {

      const mutationOptions = getDeletarDemandaMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Finaliza uma demanda
 */
export const finalizarDemanda = (
    demandaId: string,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<null>(
      {url: `/api/demanda/finalizar-demanda/${demandaId}`, method: 'POST', signal
    },
      options);
    }
  


export const getFinalizarDemandaMutationOptions = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof finalizarDemanda>>, TError,{demandaId: string}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof finalizarDemanda>>, TError,{demandaId: string}, TContext> => {

const mutationKey = ['finalizarDemanda'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof finalizarDemanda>>, {demandaId: string}> = (props) => {
          const {demandaId} = props ?? {};

          return  finalizarDemanda(demandaId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type FinalizarDemandaMutationResult = NonNullable<Awaited<ReturnType<typeof finalizarDemanda>>>
    
    export type FinalizarDemandaMutationError = ErrorType<null>

    /**
 * @summary Finaliza uma demanda
 */
export const useFinalizarDemanda = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof finalizarDemanda>>, TError,{demandaId: string}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof finalizarDemanda>>,
        TError,
        {demandaId: string},
        TContext
      > => {

      const mutationOptions = getFinalizarDemandaMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Obt√©m o resultado de uma demanda
 */
export const resultadoDemanda = (
    demandaId: string,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<ResumoDevolucaoDto>(
      {url: `/api/demanda/resultado-demanda/${demandaId}`, method: 'GET', signal
    },
      options);
    }
  

export const getResultadoDemandaQueryKey = (demandaId?: string,) => {
    return [`/api/demanda/resultado-demanda/${demandaId}`] as const;
    }

    
export const getResultadoDemandaQueryOptions = <TData = Awaited<ReturnType<typeof resultadoDemanda>>, TError = ErrorType<null>>(demandaId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof resultadoDemanda>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getResultadoDemandaQueryKey(demandaId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof resultadoDemanda>>> = ({ signal }) => resultadoDemanda(demandaId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(demandaId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof resultadoDemanda>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ResultadoDemandaQueryResult = NonNullable<Awaited<ReturnType<typeof resultadoDemanda>>>
export type ResultadoDemandaQueryError = ErrorType<null>


export function useResultadoDemanda<TData = Awaited<ReturnType<typeof resultadoDemanda>>, TError = ErrorType<null>>(
 demandaId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof resultadoDemanda>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof resultadoDemanda>>,
          TError,
          Awaited<ReturnType<typeof resultadoDemanda>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useResultadoDemanda<TData = Awaited<ReturnType<typeof resultadoDemanda>>, TError = ErrorType<null>>(
 demandaId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof resultadoDemanda>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof resultadoDemanda>>,
          TError,
          Awaited<ReturnType<typeof resultadoDemanda>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useResultadoDemanda<TData = Awaited<ReturnType<typeof resultadoDemanda>>, TError = ErrorType<null>>(
 demandaId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof resultadoDemanda>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Obt√©m o resultado de uma demanda
 */

export function useResultadoDemanda<TData = Awaited<ReturnType<typeof resultadoDemanda>>, TError = ErrorType<null>>(
 demandaId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof resultadoDemanda>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getResultadoDemandaQueryOptions(demandaId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Lista as notas de uma demanda
 */
export const listarNotasDemanda = (
    demandaId: string,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<ListarNotasDemandaResponseZodDto>(
      {url: `/api/demanda/listar-notas-demanda/${demandaId}`, method: 'GET', signal
    },
      options);
    }
  

export const getListarNotasDemandaQueryKey = (demandaId?: string,) => {
    return [`/api/demanda/listar-notas-demanda/${demandaId}`] as const;
    }

    
export const getListarNotasDemandaQueryOptions = <TData = Awaited<ReturnType<typeof listarNotasDemanda>>, TError = ErrorType<null>>(demandaId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarNotasDemanda>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListarNotasDemandaQueryKey(demandaId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listarNotasDemanda>>> = ({ signal }) => listarNotasDemanda(demandaId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(demandaId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listarNotasDemanda>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListarNotasDemandaQueryResult = NonNullable<Awaited<ReturnType<typeof listarNotasDemanda>>>
export type ListarNotasDemandaQueryError = ErrorType<null>


export function useListarNotasDemanda<TData = Awaited<ReturnType<typeof listarNotasDemanda>>, TError = ErrorType<null>>(
 demandaId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarNotasDemanda>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listarNotasDemanda>>,
          TError,
          Awaited<ReturnType<typeof listarNotasDemanda>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListarNotasDemanda<TData = Awaited<ReturnType<typeof listarNotasDemanda>>, TError = ErrorType<null>>(
 demandaId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarNotasDemanda>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listarNotasDemanda>>,
          TError,
          Awaited<ReturnType<typeof listarNotasDemanda>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListarNotasDemanda<TData = Awaited<ReturnType<typeof listarNotasDemanda>>, TError = ErrorType<null>>(
 demandaId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarNotasDemanda>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Lista as notas de uma demanda
 */

export function useListarNotasDemanda<TData = Awaited<ReturnType<typeof listarNotasDemanda>>, TError = ErrorType<null>>(
 demandaId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarNotasDemanda>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListarNotasDemandaQueryOptions(demandaId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Obt√©m informa√ß√µes da demanda
 */
export const getInfoDemanda = (
    demandaId: string,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<GetInfoDemandaResponseZodDto>(
      {url: `/api/demanda/get-info-demanda/${demandaId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetInfoDemandaQueryKey = (demandaId?: string,) => {
    return [`/api/demanda/get-info-demanda/${demandaId}`] as const;
    }

    
export const getGetInfoDemandaQueryOptions = <TData = Awaited<ReturnType<typeof getInfoDemanda>>, TError = ErrorType<null>>(demandaId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInfoDemanda>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetInfoDemandaQueryKey(demandaId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getInfoDemanda>>> = ({ signal }) => getInfoDemanda(demandaId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(demandaId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getInfoDemanda>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetInfoDemandaQueryResult = NonNullable<Awaited<ReturnType<typeof getInfoDemanda>>>
export type GetInfoDemandaQueryError = ErrorType<null>


export function useGetInfoDemanda<TData = Awaited<ReturnType<typeof getInfoDemanda>>, TError = ErrorType<null>>(
 demandaId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInfoDemanda>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInfoDemanda>>,
          TError,
          Awaited<ReturnType<typeof getInfoDemanda>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInfoDemanda<TData = Awaited<ReturnType<typeof getInfoDemanda>>, TError = ErrorType<null>>(
 demandaId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInfoDemanda>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInfoDemanda>>,
          TError,
          Awaited<ReturnType<typeof getInfoDemanda>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInfoDemanda<TData = Awaited<ReturnType<typeof getInfoDemanda>>, TError = ErrorType<null>>(
 demandaId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInfoDemanda>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Obt√©m informa√ß√µes da demanda
 */

export function useGetInfoDemanda<TData = Awaited<ReturnType<typeof getInfoDemanda>>, TError = ErrorType<null>>(
 demandaId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInfoDemanda>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetInfoDemandaQueryOptions(demandaId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



